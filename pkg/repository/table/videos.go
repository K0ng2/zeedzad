//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Videos = newVideosTable("", "videos", "")

type videosTable struct {
	sqlite.Table

	// Columns
	ID           sqlite.ColumnString
	YoutubeID    sqlite.ColumnString
	Title        sqlite.ColumnString
	Description  sqlite.ColumnString
	Thumbnail    sqlite.ColumnString
	PublishedAt  sqlite.ColumnTimestamp
	ChannelID    sqlite.ColumnString
	ChannelTitle sqlite.ColumnString
	GameID       sqlite.ColumnString
	CreatedAt    sqlite.ColumnTimestamp
	UpdatedAt    sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type VideosTable struct {
	videosTable

	EXCLUDED videosTable
}

// AS creates new VideosTable with assigned alias
func (a VideosTable) AS(alias string) *VideosTable {
	return newVideosTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VideosTable with assigned schema name
func (a VideosTable) FromSchema(schemaName string) *VideosTable {
	return newVideosTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VideosTable with assigned table prefix
func (a VideosTable) WithPrefix(prefix string) *VideosTable {
	return newVideosTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VideosTable with assigned table suffix
func (a VideosTable) WithSuffix(suffix string) *VideosTable {
	return newVideosTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVideosTable(schemaName, tableName, alias string) *VideosTable {
	return &VideosTable{
		videosTable: newVideosTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newVideosTableImpl("", "excluded", ""),
	}
}

func newVideosTableImpl(schemaName, tableName, alias string) videosTable {
	var (
		IDColumn           = sqlite.StringColumn("id")
		YoutubeIDColumn    = sqlite.StringColumn("youtube_id")
		TitleColumn        = sqlite.StringColumn("title")
		DescriptionColumn  = sqlite.StringColumn("description")
		ThumbnailColumn    = sqlite.StringColumn("thumbnail")
		PublishedAtColumn  = sqlite.TimestampColumn("published_at")
		ChannelIDColumn    = sqlite.StringColumn("channel_id")
		ChannelTitleColumn = sqlite.StringColumn("channel_title")
		GameIDColumn       = sqlite.StringColumn("game_id")
		CreatedAtColumn    = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn    = sqlite.TimestampColumn("updated_at")
		allColumns         = sqlite.ColumnList{IDColumn, YoutubeIDColumn, TitleColumn, DescriptionColumn, ThumbnailColumn, PublishedAtColumn, ChannelIDColumn, ChannelTitleColumn, GameIDColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = sqlite.ColumnList{YoutubeIDColumn, TitleColumn, DescriptionColumn, ThumbnailColumn, PublishedAtColumn, ChannelIDColumn, ChannelTitleColumn, GameIDColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns     = sqlite.ColumnList{CreatedAtColumn, UpdatedAtColumn}
	)

	return videosTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		YoutubeID:    YoutubeIDColumn,
		Title:        TitleColumn,
		Description:  DescriptionColumn,
		Thumbnail:    ThumbnailColumn,
		PublishedAt:  PublishedAtColumn,
		ChannelID:    ChannelIDColumn,
		ChannelTitle: ChannelTitleColumn,
		GameID:       GameIDColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
